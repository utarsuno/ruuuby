# encoding: UTF-8

module ::Math
  module Algebra

    # @see https://en.wikipedia.org/wiki/Tropical_geometry
    # @see https://en.wikipedia.org/wiki/Tropical_semiring
    # @see https://en.wikipedia.org/wiki/Algebraic_structure
    #
    # @note geometry aspects will not be primary focus in this module
    #
    # "the study of polynomials and their `geometric properties` when addition is replaced with minimization and multiplication is replaced with ordinary addition"
    #
    # ‚Ä£ standard multiplication{`*`} is transformed to{`‚®Ç`}: `x ‚®Ç y = x + y`
    # ‚Ä£ standard addition(`+`) is transformed to{`‚®Å`} w/ 2 versions:
    #
    #     | name               | definition            | additive identity |
    #     | ------------------ | -------------------- | ----------------- |
    #     | `min-plus algebra` | `x ‚®Å y = min{x, y}`  | `‚àû`              |
    #     | `max-plus algebra` | `x ‚®Å y = max{x, y}`  | `‚àí‚àû`             |
    #
    # ‚Ä£ "unit for ‚®Å is +‚àû, and the unit for ‚®Ç is 0"
    # ‚Ä£ `tropical addition` is `commutative`: `‚àÄ a,b ‚àà ‚Ñù max(a, b) = max(b, a)`
    # ‚Ä£ `tropical addition` is `associative`: `‚àÄ a,b ‚àà ‚Ñù max(max(a, b), c) = max(max(a, c), b)`
    # ‚Ä£ `tropical multiplication` is `commutative` and `associative ‚àà ‚Ñù`
    # ‚Ä£ `tropical multiplication` is `distributive`
    # ‚Ä£ `additive inverse` DNE as ‚àÄ element does not necessarily have a matching element that when summed, equal the `additive identity`
    #   ‚Ä£ (as -‚àû is < ‚àÄ element other than -‚àû; thus, won't be returned from func{`max`})
    #
    # ‚Ä£ "`eigenvalue-eigenvector` pair `Œª` and `x` for a given matrix `A` satisfy the equation `Ax = Œªx` where `Œª ‚àà ‚Ñù, A ‚àà ‚Ñù‚ÅøÀ£‚Åø`, and `x ‚àà ‚Ñù‚Åø`"
    #
    # ‚Ä£ `normalized weight of a cycle` = `sum of edge weights` / `number of edges`
    #
    # ‚Ä£ `tropical algebra` is a `semi-ring`
    #   ‚Ä£ "given by `(‚Ñù·¥π·¥¨À£,‚®Å,‚®Ç) where ‚Ñù·¥π·¥¨À£ = ‚Ñù‚à™{‚àí‚àû}`"
    module Tropical
      module ContextNumeric
        refine ::Numeric do

          # @param [Integer, Float] m
          #
          # @return [ArgumentError]
          #
          # @return [Integer, Float]
          def ‚®Å(m)
            üõënum‚ùì('m', m)
            self >= m ? self : m
          end

          # @param [Integer, Float, Numeric, Matrix] m
          #
          # @return [ArgumentError]
          #
          # @return [Integer, Float]
          def ‚®Ç(m)
            if m.matrix?
              rows = ::Array.new(m.num_rows) {|i|
                ::Array.new(m.num_cols) {|j|
                  m[i, j] + self
                }
              }
              ::Matrix[*rows]
            else
              üõënum‚ùì('m', m)
              self + m
            end
          end

        end # end: {refine ::Numeric}
      end # end: {module ContextNumeric}
    end # end: {module Tropical}
  end
end
