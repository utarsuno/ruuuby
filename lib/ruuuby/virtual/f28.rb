# coding: UTF-8

using ::ThetaAngle::ContextStrParsing

module ::Ruuuby
  module Feature
    module Extendable
      module MainF28

        # @return [Float]
        def œÄ; ::Math::PI; end

        # @return [Float]
        def ‚ÑÆ; ::Math::E; end

        # the `limiting` difference between the `harmonic series` and the `natural logarithm`
        #
        # @return [Float]
        def Œ≥; ::Float::CONST_EULER_MASCHERONI; end

        # @return [Float] Float::INFINITY
        def ‚àû; ::Float::INFINITY; end

        # the only real solution to: x¬≥ = x + 1
        #
        # @return [Float]
        def œÅ; ::Float::RATIO_PLASTIC; end

        # a‚à∂b = (2a+b)‚à∂a  ‚â° Œ¥
        # a‚à∂b = (2+b/a)‚à∂1 ‚â° Œ¥
        #
        # Œ¥ = 2 + 1/Œ¥
        #
        # @return [Float]
        def Œ¥; ::Float::RATIO_SILVER; end

        # a full rotation around the circle, base representation in turns(+Œ∏ùûΩ+)
        #
        # @type [ThetaAngle]
        def ùûΩ; ::Math::ANGLE_TAU; end

        #          __   __
        #  |\/| | /__` /  `
        #  |  | | .__/ \__,

        # @return [Symbol] 'complex-infinity'
        def ‚àû‚ÑÇ; ::Float::INFINITY_COMPLEX; end

        # -------------------------------------------------------------------------------------------------------- | *f27* |

        # @param [Float, Int, ThetaAngle, String] arg
        #
        # @return [ThetaAngle]
        def Œ∏¬∞(arg)
          if arg.str?
            ::ThetaAngle.new_degree(arg.¬∞)
          else
            ::ThetaAngle.new_degree(arg)
          end
        end

        # @param [Float, Int, ThetaAngle, String] arg
        #
        # @return [ThetaAngle]
        def Œ∏ ≥(arg)
          if arg.str?
            ::ThetaAngle.new_radian(arg. ≥)
          else
            ::ThetaAngle.new_radian(arg)
          end
        end

        # @param [Float, Int, ThetaAngle, String] arg
        #
        # @return [ThetaAngle]
        def Œ∏·µç(arg)
          if arg.str?
            ::ThetaAngle.new_gon(arg.·µç)
          else
            ::ThetaAngle.new_gon(arg)
          end
        end

        # @param [Float, Int, ThetaAngle, String] arg
        #
        # @return [ThetaAngle]
        def Œ∏ùûΩ(arg)
          if arg.str?
            ::ThetaAngle.new_turn(arg.ùûΩ)
          else
            ::ThetaAngle.new_turn(arg)
          end
        end

      end
    end
  end
end
