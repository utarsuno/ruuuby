# coding: UTF-8

using ::ThetaAngle::ContextStrParsing

module ::Ruuuby
  module Feature
    module Extendable
      module MainF28

        # @return [Float]
        def œÄ; ::Math::PI; end

        # @return [Float]
        def ‚ÑÆ; ::Math::E; end

        # the `limiting` difference between the `harmonic series` and the `natural logarithm`
        #
        # @return [Float]
        def Œ≥; ::Float::CONST_EULER_MASCHERONI; end

        # @return [Float] Float::INFINITY
        def ‚àû; ::Float::INFINITY; end

        # the only real solution to: x¬≥ = x + 1
        #
        # @return [Float]
        def œÅ; ::Float::RATIO_PLASTIC; end

        # a‚à∂b = (2a+b)‚à∂a  ‚â° Œ¥
        # a‚à∂b = (2+b/a)‚à∂1 ‚â° Œ¥
        #
        # Œ¥ = 2 + 1/Œ¥
        #
        # @return [Float]
        def Œ¥; ::Float::RATIO_SILVER; end

        # a full rotation around the circle, base representation in turns(+Œ∏ùûΩ+)
        #
        # @type [ThetaAngle]
        def ùûΩ; ::Math::ANGLE_TAU; end

        #  ___  __        __  ___    __           __   __        __  ___           ___  __
        # |__  |__)  /\  /  `  |  | /  \ |\ |    /  ` /  \ |\ | /__`  |   /\  |\ |  |  /__`
        # |    |  \ /~~\ \__,  |  | \__/ | \|    \__, \__/ | \| .__/  |  /~~\ | \|  |  .__/
        #

        # @return [Float] +Float::ONE_HALF+
        def ¬Ω; ::Float::ONE_HALF; end

        # @return [Float] +Float::ONE_THIRD+
        def ‚Öì; ::Float::ONE_THIRD; end

        # @return [Float] +Float::TWO_THIRDS+
        def ‚Öî; ::Float::TWO_THIRDS; end

        # @return [Float] +Float::ONE_FOURTH+
        def ¬º; ::Float::ONE_FOURTH; end

        # @return [Float] +Float::THREE_FOURTHS+
        def ¬æ; ::Float::THREE_FOURTHS; end

        # @return [Float] +Float::ONE_FIFTH+
        def ‚Öï; ::Float::ONE_FIFTH; end

        # @return [Float] +Float::TWO_FIFTHS+
        def ‚Öñ; ::Float::TWO_FIFTHS; end

        # @return [Float] +Float::THREE_FIFTHS+
        def ‚Öó; ::Float::THREE_FIFTHS; end

        # @return [Float] +Float::FOUR_FIFTHS+
        def ‚Öò; ::Float::FOUR_FIFTHS; end

        # @return [Float] +Float::ONE_SIXTH+
        def ‚Öô; ::Float::ONE_SIXTH; end

        # @return [Float] +Float::ONE_SEVENTH+
        def ‚Öê; ::Float::ONE_SEVENTH; end

        # @return [Float] +Float::ONE_EIGHTH+
        def ‚Öõ; ::Float::ONE_EIGHTH; end

        # @return [Float] +Float::THREE_EIGHTHS+
        def ‚Öú; ::Float::THREE_EIGHTHS; end

        # @return [Float] +Float::FIVE_EIGHTHS+
        def ‚Öù; ::Float::FIVE_EIGHTHS; end

        # @return [Float] +Float::SEVEN_EIGHTHS+
        def ‚Öû; ::Float::SEVEN_EIGHTHS; end

        # @return [Float] +Float::ONE_NINTH+
        def ‚Öë; ::Float::ONE_NINTH; end

        # @return [Float] +Float::ONE_TENTH+
        def ‚Öí; ::Float::ONE_TENTH; end

        #          __   __
        #  |\/| | /__` /  `
        #  |  | | .__/ \__,

        # @return [Symbol] 'complex-infinity'
        def ‚àû‚ÑÇ; ::Float::INFINITY_COMPLEX; end

        # -------------------------------------------------------------------------------------------------------- | *f27* |

        # @param [Float, Int, ThetaAngle, String] arg
        #
        # @return [ThetaAngle]
        def Œ∏¬∞(arg)
          if arg.str?
            ::ThetaAngle.new_degree(arg.¬∞)
          else
            ::ThetaAngle.new_degree(arg)
          end
        end

        # @param [Float, Int, ThetaAngle] arg
        #
        # @return [ThetaAngle]
        def Œ∏ ≥(arg); ::ThetaAngle.new_radian(arg); end

        # @param [Float, Int, ThetaAngle] arg
        #
        # @return [ThetaAngle]
        def Œ∏·µç(arg); ::ThetaAngle.new_gon(arg); end

        # @param [Float, Int, ThetaAngle] arg
        #
        # @return [ThetaAngle]
        def Œ∏ùûΩ(arg); ::ThetaAngle.new_turn(arg); end

      end
    end
  end
end
