# encoding: UTF-8

# =====================================================================================================================
#               __                                  ___          ___                __
#              /\ \__  __                          /\_ \       /'___\              /\ \__
#   ___   _____\ \ ,_\/\_\    ___     ___      __  \//\ \     /\ \__/   __     __  \ \ ,_\  __  __  _ __    __    ____
#  / __`\/\ '__`\ \ \/\/\ \  / __`\ /' _ `\  /'__`\  \ \ \    \ \ ,__\/'__`\ /'__`\ \ \ \/ /\ \/\ \/\`'__\/'__`\ /',__\
# /\ \L\ \ \ \L\ \ \ \_\ \ \/\ \L\ \/\ \/\ \/\ \L\.\_ \_\ \_   \ \ \_/\  __//\ \L\.\_\ \ \_\ \ \_\ \ \ \//\  __//\__, `\
# \ \____/\ \ ,__/\ \__\\ \_\ \____/\ \_\ \_\ \__/.\_\/\____\   \ \_\\ \____\ \__/.\_\\ \__\\ \____/\ \_\\ \____\/\____/
#  \/___/  \ \ \/  \/__/ \/_/\/___/  \/_/\/_/\/__/\/_/\/____/    \/_/ \/____/\/__/\/_/ \/__/ \/___/  \/_/ \/____/\/___/
#           \ \_\
#            \/_/
# =====================================================================================================================

if üíé.engine.stats_ext['F10_B04']
  ::Method.alias_method :üè†, :source_location
end

if üíé.engine.stats_ext['F12_B00']
  class ::Object

    # @return [Date]
    def üìÅ; ::File; end

    # @return [Dir]
    def üóÑÔ∏è; ::Dir; end

  end
end

if üíé.engine.stats_ext['F26_B00']
  class ::Object

    # @return [Date]
    def üìÖ; ::Date; end

    # @return [::Time]
    def üïí; ::Time; end

    # @return [::DateTime]
    def üìÖüïí; ::DateTime; end
  end
end

if üíé.engine.stats_ext['F28_B09']
  class ::Object

    # @return [Float] +Float::ONE_HALF+
    def ¬Ω; ::Float::ONE_HALF; end

    # @return [Float] +Float::ONE_THIRD+
    def ‚Öì; ::Float::ONE_THIRD; end

    # @return [Float] +Float::TWO_THIRDS+
    def ‚Öî; ::Float::TWO_THIRDS; end

    # @return [Float] +Float::ONE_FOURTH+
    def ¬º; ::Float::ONE_FOURTH; end

    # @return [Float] +Float::THREE_FOURTHS+
    def ¬æ; ::Float::THREE_FOURTHS; end

    # @return [Float] +Float::ONE_FIFTH+
    def ‚Öï; ::Float::ONE_FIFTH; end

    # @return [Float] +Float::TWO_FIFTHS+
    def ‚Öñ; ::Float::TWO_FIFTHS; end

    # @return [Float] +Float::THREE_FIFTHS+
    def ‚Öó; ::Float::THREE_FIFTHS; end

    # @return [Float] +Float::FOUR_FIFTHS+
    def ‚Öò; ::Float::FOUR_FIFTHS; end

    # @return [Float] +Float::ONE_SIXTH+
    def ‚Öô; ::Float::ONE_SIXTH; end

    # @return [Float] +Float::ONE_SEVENTH+
    def ‚Öê; ::Float::ONE_SEVENTH; end

    # @return [Float] +Float::ONE_EIGHTH+
    def ‚Öõ; ::Float::ONE_EIGHTH; end

    # @return [Float] +Float::THREE_EIGHTHS+
    def ‚Öú; ::Float::THREE_EIGHTHS; end

    # @return [Float] +Float::FIVE_EIGHTHS+
    def ‚Öù; ::Float::FIVE_EIGHTHS; end

    # @return [Float] +Float::SEVEN_EIGHTHS+
    def ‚Öû; ::Float::SEVEN_EIGHTHS; end

    # @return [Float] +Float::ONE_NINTH+
    def ‚Öë; ::Float::ONE_NINTH; end

    # @return [Float] +Float::ONE_TENTH+
    def ‚Öí; ::Float::ONE_TENTH; end

  end

  ::Math::Space::SymbolicNumbersSpace::MAPPING.merge!(
      {
          ¬Ω: ::Float::ONE_HALF,
          ‚Öì: ::Float::ONE_THIRD,
          ‚Öî: ::Float::TWO_THIRDS,
          ¬º: ::Float::ONE_FOURTH,
          ¬æ: ::Float::THREE_FOURTHS,
          ‚Öï: ::Float::ONE_FIFTH,
          ‚Öñ: ::Float::TWO_FIFTHS,
          ‚Öó: ::Float::THREE_FIFTHS,
          ‚Öò: ::Float::FOUR_FIFTHS,
          ‚Öô: ::Float::ONE_SIXTH,
          ‚Öê: ::Float::ONE_SEVENTH,
          ‚Öõ: ::Float::ONE_EIGHTH,
          ‚Öú: ::Float::THREE_EIGHTHS,
          ‚Öù: ::Float::FIVE_EIGHTHS,
          ‚Öû: ::Float::SEVEN_EIGHTHS,
          ‚Öë: ::Float::ONE_NINTH,
          ‚Öí: ::Float::ONE_TENTH,
      }
  )
end

# =====================================================================================================================
#                                                __         ___                __
#                             __                /\ \      /'___\              /\ \__
#  _ __    __     __   __  __/\_\  _ __    __   \_\ \    /\ \__/   __     __  \ \ ,_\  __  __  _ __    __    ____
# /\`'__\/'__`\ /'__`\/\ \/\ \/\ \/\`'__\/'__`\ /'_` \   \ \ ,__\/'__`\ /'__`\ \ \ \/ /\ \/\ \/\`'__\/'__`\ /',__\
# \ \ \//\  __//\ \L\ \ \ \_\ \ \ \ \ \//\  __//\ \L\ \   \ \ \_/\  __//\ \L\.\_\ \ \_\ \ \_\ \ \ \//\  __//\__, `\
#  \ \_\\ \____\ \___, \ \____/\ \_\ \_\\ \____\ \___,_\   \ \_\\ \____\ \__/.\_\\ \__\\ \____/\ \_\\ \____\/\____/
#   \/_/ \/____/\/___/\ \/___/  \/_/\/_/ \/____/\/__,_ /    \/_/ \/____/\/__/\/_/ \/__/ \/___/  \/_/ \/____/\/___/
#                    \ \_\
#                     \/_/
# =====================================================================================================================

::Range.alias_method :‚àÄ, :each
# ---------------------------------------------------------------------------------------------------------- | *f03* |
::Proc.alias_method :ùî†, :arity
# ---------------------------------------------------------------------------------------------------------- | *f04* |
::NilClass.alias_method :‚àÖ?, :empty?

module ::Kernel

  # ------------------------------------------------------------------------------------------------ | *b04* | *f10* |

  # Return the square-root of the provided argument.
  #
  # @param [Integer, Float, Numeric, Rational, Complex, String] n
  #
  # @return [Float, Numeric]
  def ‚àö(n)
    if n.str? && n.to_num?
      ::Math.square_root(n.to_num.to_f)
    else
      üõënum‚ùì(:n, n)
      ::Math.square_root(n.to_f)
    end
  end

  # Return the cube-root of the provided argument.
  #
  # @param [Integer, Float, Numeric, Rational, Complex, String] n
  #
  # @return [Float, Numeric]
  def ‚àõ(n)
    if n.str? && n.to_num?
      ::Math.cubic_root(n.to_num.to_f)
    else
      üõënum‚ùì(:n, n)
      ::Math.cubic_root(n.to_f)
    end
  end

  # ------------------------------------------------------------------------------------------------ | *b05* | *f10* |

  # @return [Float] the base ‚ÑÆ logarithm of +n+
  def log‚Çë(n)
    if n < 0 && n == (Œ© ** -1)
      ::BigMath.exp(-Œ©, 42)
    else
      ::Math.log_e(n.to_f)
    end
  end

  # @param [Numeric, Float, Complex] n
  #
  # | domain    | (0, ‚àû)  |
  # | co-domain | (-‚àû, ‚àû) |
  #
  # @return [Float] the base 2 logarithm of +n+
  def log‚ÇÇ(n); ::Math.log2(n); end

  # @param [Numeric, Float, Complex] n
  #
  # | domain    | (0, ‚àû)  |
  # | co-domain | (-‚àû, ‚àû) |
  #
  # @return [Float] the base 10 logarithm of +n+
  def log‚ÇÅ‚ÇÄ(n); ::Math.log10(n); end

  # -------------------------------------------------------------------------------------------------------- | *f28* |

  # ‚Ä£ `a+b` is to `a` as `a` is to `b`
  # ‚Ä£ `a/b` is `linearly proportional` `(a+b)/a`
  #
  # ‚Ä£ a‚à∂b = (a+b)‚à∂a
  # ‚Ä£ a‚à∂b = (1+b/a)‚à∂1
  #
  # ‚Ä£ ùöΩ = ((1 + ‚àö5) / 2)
  # ‚Ä£ ùöΩ = (1 + (1 / ùöΩ))
  #
  # ‚Ä£ the only positive solution to: x¬≤ = x + 1
  #
  # @type [Float]
  ùöΩ = ::Float::RATIO_GOLDEN

  # ‚Ä£ let `a+b = circumference of a circle`, (a+b)/a = a/b; (a->longer_arc, b->smaller_arc)
  #
  # @type [ThetaAngle]
  ·Ç¥ = ::Math::ANGLE_GOLDEN

  # @return [Float]
  def œÄ; ::Math::PI; end

  # @return [Float]
  def ‚ÑÆ; ::Math::E; end

  # @return [Float] Float::INFINITY
  def ‚àû; ::Float::INFINITY; end

  #          __   __
  #  |\/| | /__` /  `
  #  |  | | .__/ \__,

  # @return [Symbol] 'complex-infinity'
  def ‚àû‚ÑÇ; ::Float::INFINITY_COMPLEX; end

  # -----------------------------------------------------------------------------------------------------------------
end
