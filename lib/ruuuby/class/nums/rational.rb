
# add various functions to existing class +Rational+
class ::Rational

  # @return [Boolean] true, if finite and numerator and denominator pass
  def ‚Ñï? ; self.numerator.‚Ñï? && self.denominator.‚Ñï? ; end

  # @return [Boolean] true, if finite and numerator and denominator pass
  def ‚Ñ§? ; self.finite? && (self.fdiv(1) % 1 == 0) ; end

  # ‚ö†Ô∏è, coverage missing beyond ‚Ñ§
  #
  # @return [Boolean|NilClass] true, if finite and numerator and denominator pass
  def ‚Ñö?
    return true if self.numerator.‚Ñ§? && self.denominator.‚Ñ§?
    nil
  end

  # @return [Boolean] true, if finite and numerator and denominator pass
  def ‚ÑÇ? ; self.numerator.‚ÑÇ? && self.denominator.‚ÑÇ? ; end

  # @return [Boolean] true, if finite and numerator and denominator pass
  def ‚Ñù? ; self.numerator.‚Ñö? && self.denominator.‚Ñö? ; end

  # `Ruuuby` implementation before switching to `C-extensions`: (`f98`)
  #
  # @param [Symbol]
  #
  # @raise [RuntimeError]
  #
  # @return [Numeric, Symbol]
  def ^(n)
    if n.sym?
      if n.power?
        self ** n.pow_to_i
      elsif n == :‚àû
        if self == 1 || self == -1
          return ::Float::NAN
        elsif self == 0 || (self < 1 && self > 0) || (self > -1 && self < 0)
          return 0
        elsif self < 0
          return ::Float::INFINITY_COMPLEX
        else
          return ::Float::INFINITY
        end
      elsif n == :'-‚àû'
        if self == 1 || self == -1
          return ::Float::NAN
        elsif self == 0 || (self > -1 && self < 0)
          return ::Float::INFINITY_COMPLEX
        elsif self < 1 && self > 0
          return ::Float::INFINITY
        else
          return self ** Float::INFINITY_NEGATIVE
        end
      elsif n == :‚àû‚ÑÇ
        if self > 0
          return ::Float::NAN
        elsif self == 0
          return 0
        else
          return ::Float::NAN
        end
      else
        üõë RuntimeError.üÜï("| c{Rational}-> m{^} self(#{self.to_s}) received invalid exponential argument(#{n.to_s}) |")
      end
    else
      üõë RuntimeError.üÜï("| c{Rational}-> m{^} self(#{self.to_s}) received invalid exponential argument(#{n.to_s}) |")
    end
  end

end
