# coding: UTF-8

# add various aliases & functions to existing Class(+Numeric+)
class ::Numeric

  # ---------------------------------------------------------------------------------------------------------- | *f11* |

  # @return [Boolean] true, if this number is neither NaN or Â±âˆž
  def âˆž? ; self.infinite? != nil ; end

  # ---------------------------------------------------------------------------------------------------------- | *f16* |

  # @type [Symbol]
  EXPONENTIAL_INF          = :âˆž

  # @type [Symbol]
  EXPONENTIAL_NEGATIVE_INF = :'-âˆž'

  # | ------------------------------------------------------------------------------------------------------------------

  # @note: for any 2 transcendentals `a` & `b`, at least one of `a+b` and `a*b` must be transcendental
  #
  # @example:
  #  * (Ï€)           is transcendental
  #  * (1 - Ï€)       is transcendental
  #  * (Ï€ + (1 - Ï€)) is not transcendental
  #
  # @return [Boolean]
  #def self.known_transcendental?(n); ::Math::SetTheory::RealNumbers::KNOWN_TRANSCENDENTALS.âˆ‹?(n.ðŸ†”); end

  # @return [Boolean]
  def self.known_real_algebraic?(n); ::Math::SetTheory::RealAlgebraicNumbers::KNOWN_REAL_ALGEBRAIC.âˆ‹?(n.ðŸ†”); end

  # @return [Boolean]
  def self.known_irrational?(n); ::Math::SetTheory::IrrationalNumbers::KNOWN_IRRATIONALS.âˆ‹?(n.ðŸ†”); end

end
