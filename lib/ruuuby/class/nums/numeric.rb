# encoding: utf-8

# add various functions to existing module +Numeric+
class ::Numeric

  # ---------------------------------------------------------------------------------------------------------- | *f11* |

  # @return [Boolean] true, if this number is neither NaN or ¬±‚àû
  def ‚àû? ; self.infinite? != nil ; end
  alias_method :‚ôæÔ∏è?, :‚àû?

  # @return [Boolean] true, if this number is equivalent to 0 or 1 {all numbers in the boolean-domain(+ùîπ+)}
  def ùîπ? ; self == 0 || self == 1 ; end

  # @return [Boolean] true, the universal-set(+ùïå+) in this context only excludes (NaN, +‚àû, and -‚àû)
  alias_method :ùïå?, :finite?

  # ---------------------------------------------------------------------------------------------------------- | *f16* |

  # @type [Symbol]
  EXPONENTIAL_n9 = :‚Åª‚Åπ

  # @type [Symbol]
  EXPONENTIAL_n8 = :‚Åª‚Å∏

  # @type [Symbol]
  EXPONENTIAL_n7 = :‚Åª‚Å∑

  # @type [Symbol]
  EXPONENTIAL_n6 = :‚Åª‚Å∂

  # @type [Symbol]
  EXPONENTIAL_n5 = :‚Åª‚Åµ

  # @type [Symbol]
  EXPONENTIAL_n4 = :‚Åª‚Å¥

  # @type [Symbol]
  EXPONENTIAL_n3 = :‚Åª¬≥

  # @type [Symbol]
  EXPONENTIAL_n2 = :‚Åª¬≤

  # @type [Symbol]
  EXPONENTIAL_n1 = :‚Åª¬π

  # @type [Symbol]
  EXPONENTIAL_0 = :‚Å∞

  # @type [Symbol]
  EXPONENTIAL_1 = :¬π

  # @type [Symbol]
  EXPONENTIAL_2 = :¬≤

  # @type [Symbol]
  EXPONENTIAL_3 = :¬≥

  # @type [Symbol]
  EXPONENTIAL_4 = :‚Å¥

  # @type [Symbol]
  EXPONENTIAL_5 = :‚Åµ

  # @type [Symbol]
  EXPONENTIAL_6 = :‚Å∂

  # @type [Symbol]
  EXPONENTIAL_7 = :‚Å∑

  # @type [Symbol]
  EXPONENTIAL_8 = :‚Å∏

  # @type [Symbol]
  EXPONENTIAL_9 = :‚Åπ

  # | ------------------------------------------------------------------------------------------------------------------

end
