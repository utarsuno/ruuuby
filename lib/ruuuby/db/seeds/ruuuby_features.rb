# encoding: UTF-8

@f00 = ::RuuubyFeature.spawn(0, "`η̂` to alias concept of `normalization` (offered in any applicable context)", 2, %w())
@f01 = ::RuuubyFeature.spawn(1, 'simplify debugging state & logging through the `RuuubyEngine`', 2, %w(ruuuby engine logging logs log))
@f02 = ::RuuubyFeature.spawn(2, 'augment working with other `API` sets, be it a small `CLI script` to larger `domain-driven/micro-services` representations', 2, %w(ruuuby engine cli))
@f03 = ::RuuubyFeature.spawn(3, "`𝔠` to alias concept of `cardinality`", 2, %w())
@f04 = ::RuuubyFeature.spawn(4, '`∅` to alias concept of `empty`', 2, %w())
@f05 = ::RuuubyFeature.spawn(5, '`>>` to offer reverse functionality of `<<`', 4, %w(str ary >> <<))
@f06 = ::RuuubyFeature.spawn(6, 'offer easy to use type-check funcs for common/core Classes (ex: `variable.int?`)', 1, %w())
@f07 = ::RuuubyFeature.spawn(7, 'offer layer of functionality to easily describe & check various meta-data on Ruby', 1, %w())
@f08 = ::RuuubyFeature.spawn(8, 'enable quick clean-up, editing, etc functions for `enumerables` (including `String`)', 1, %w())
@f09 = ::RuuubyFeature.spawn(9, 'add math `notation & operations` for both `set`(ex: `Set`) and `multiset`(ex: `Array`)', 1, %w(math set multiset enumerables set-theory))
@f10 = ::RuuubyFeature.spawn(10, 'offer special character aliases for natural ease of readability', 2, %w())
@f11 = ::RuuubyFeature.spawn(11, 'abstract `SetTheory` and offer discrete singleton objs which reference various groups of numbers', 2, %w(math set-theory))
@f12 = ::RuuubyFeature.spawn(12, 'enable more simple `file/directory io`', 2, %w(io file dir))
@f13 = ::RuuubyFeature.spawn(13, '`∃` to alias concept of `does this(arg) exist?` and `∄` to mean inverse: `does this(arg) not exist?`', 2, %w())
@f14 = ::RuuubyFeature.spawn(14, 'enable easier catching and throwing of parameter type errors', 2, %w())
@f15 = ::RuuubyFeature.spawn(15, 'enable quicker tracking and auditing of features across versions', 2, %w())
@f16 = ::RuuubyFeature.spawn(16, 'for specific classes, patch in the operation of raising to an exponent, using operator(`^`) w/ `superscripts`', 2, %w())
@f17 = ::RuuubyFeature.spawn(17, 'abstract `Trigonometry`; offering static math functions', 2, %w(math trigonometry trig))
@f18 = ::RuuubyFeature.spawn(18, 'represent needed fields of math into organized groupings w/ abstractions', 2, %w(math))
@f19 = ::RuuubyFeature.spawn(19, 'add support for automatic-differentiation', 0, %w(math automatic-differentiation AD auto-diff))
@f20 = ::RuuubyFeature.spawn(20, 'enable easier (general) syntax & pattern parsing', 1, %w())
@f21 = ::RuuubyFeature.spawn(21, 'enable easier textual/numerical/syntax parsing', 1, %w())
@f22 = ::RuuubyFeature.spawn(22, 'add a light abstraction to working w/ the built-in `GC` & `JIT` utilities', 2, %w(ruuuby engine gc jit))
@f23 = ::RuuubyFeature.spawn(23, "gather statistics (and/or more debugging information) on `Ruuuby` {example-context: optimizing ordering of if-conditions / function-calls}", 2, %w(ruuuby engine))
@f24 = ::RuuubyFeature.spawn(24, "Class(String): add syntax parsing for snake-case and camel-case", 1, %w())
@f25 = ::RuuubyFeature.spawn(25, "bundle `Ruuuby` meta-data related functionality w/ base alias(`💎`)", 1, %w())
@f26 = ::RuuubyFeature.spawn(26, 'enable more simple syntax parsing for `ISO8601` and other time operations', 1, %w())
@f27 = ::RuuubyFeature.spawn(27, 'add new class (`ThetaAngle`) for easier operations involving angles', 2, %w())
@f28 = ::RuuubyFeature.spawn(28, 'formally support various math constants & equations (ex: aliasing the golden-ratio w/ (`𝚽`)', 2, %w(math geometry symbolic-math))
@f29 = ::RuuubyFeature.spawn(29, 'add new class (`Quaternion`) for easier operations involving `quaternions`', 0, %w(math linear-algebra Quaternion))
@f30 = ::RuuubyFeature.spawn(30, 'mimic `SetTheory` by creating data-type groupings for Ruby data', 2, %w())
@f31 = ::RuuubyFeature.spawn(31, 'provide an `API` for `GIT` operations w/ a light layer over gem{`rugged`}', 2, %w(ruuuby engine git api))
@f32 = ::RuuubyFeature.spawn(32, 'abstract `NumberTheory`; offering static math functions', 2, %w(math number-theory))
@f33 = ::RuuubyFeature.spawn(33, 'abstract `Combinatorics`; offering static math functions', 2, %w(math combinatorics))
@f34 = ::RuuubyFeature.spawn(34, 'abstract `Geometry`; offering static math functions; esp. those for `Shapes`', 2, %w(math geometry))
@f35 = ::RuuubyFeature.spawn(35, 'abstract `Statistics`; offering static math functions', 2, %w(math statistics stats))
@f36 = ::RuuubyFeature.spawn(36, 'add new class (`TimeSeriesData`) for easier operations involving multi-sample based stats', 2, %w(math stats time-series data))
@f37 = ::RuuubyFeature.spawn(37, 'abstract `GraphTheory`; offering static math functions and custom `Graph classes`', 2, %w(math graph-theory graphs))
@f38 = ::RuuubyFeature.spawn(38, 'abstract `Tropical Algebra`; offering static math functions and `Refinements` for specific classes', 2, %w(math tropical-algebra tropical algebra))
@f39 = ::RuuubyFeature.spawn(39, "offer a light wrapper over `Ruby's` default web-based-protocol requests", 2, %w(web http socket https websocket))
@f40 = ::RuuubyFeature.spawn(40, 'provide an `API` for `Docker` operations w/ a light layer over gem{`docker-api`}', 2, %w(api docker))
@f41 = ::RuuubyFeature.spawn(41, 'provide an `API` for `Brew` operations', 2, %w(api brew))
@f42 = ::RuuubyFeature.spawn(42, 'provide an `API` for `RabbitMQ` operations w/ a light layer over gem{`bunny`}', 2, %w(api rabbitmq rabbit))

@f92 = ::RuuubyFeature.spawn(92, 'enable building with specific DB support loaded', 2, %w(builds))
@f93 = ::RuuubyFeature.spawn(93, 'offer help in managing custom scripts, functionality, and anything else needed for too niche of scenarios to consider adding as a feature or even a conditionally-loadable feature', 2, %w(builds))
@f94 = ::RuuubyFeature.spawn(94, 'enable a `WebAssembly` based build (for `JS`/`WebGL`)', 0, %w(builds))
@f95 = ::RuuubyFeature.spawn(95, 'enable pure a `Ruby` only build', 0, %w(builds))
@f96 = ::RuuubyFeature.spawn(96, 'painlessly support multiple Operation Systems (ex: Alpine Linux, macOS, etc)', 0, %w(OS docker kubernetes))
@f97 = ::RuuubyFeature.spawn(97, 'offer custom builds of `Ruuuby` to support only the needed/wanted unicode/symbols/emojis etc', 2, %w(builds))
@f98 = ::RuuubyFeature.spawn(98, '`C-extensions`', 2, %w(builds extensions))
@f99 = ::RuuubyFeature.spawn(99, '`Java-extensions`/`JRuby`', 2, %w(builds extensions))
