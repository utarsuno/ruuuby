
@f00.spawn_behaviors(['create func{Œ∑ÃÇ!} for class(`Array`)'])

@f01.spawn_behaviors(
    [
        'supports mode: none (empty methods called for logging)',
        'supports mode: stdout (log to console)',
        'supports mode: stderr (log only errors to console)',
        'supports mode: file (standard Ruby log file logging)',
        'supports setting the logging level',
        'supports running a hybrid of logging modes'
    ]
)

@f05.spawn_behaviors(['offer func{>>} to class(`Array`)', 'offer func{>>} to class(`String`)'])

@f06.spawn_behaviors(
    [
        'offer funcs{num?, üõënum‚ùì, üõënums‚ùì} w/ normalizers{‚àà‚Ñï, ‚ààùïé, ‚àà‚Ñ§, ‚ààùïå, ‚àà‚Ñïùïä, ‚ààùïéùïä, ‚àà‚Ñ§ùïä, ‚ààùïåùïä}',
        'offer funcs{str?, üõëstr‚ùì, üõëstrs‚ùì} w/ normalizers{‚àâ‚àÖ}',
        'offer funcs{int?, üõëint‚ùì, üõëints‚ùì} w/ normalizers{‚àà‚Ñï, ‚ààùïé, ‚àà‚Ñ§, ‚ààùïå}',
        'offer funcs{ary?, üõëary‚ùì, üõëarys‚ùì} w/ normalizers{‚àâ‚àÖ}',
        'offer funcs{flt?, üõëflt‚ùì, üõëflts‚ùì} w/ normalizers{‚ààùïå}',
        'offer funcs{bool?, üõëbool‚ùì, üõëbools‚ùì}',
        'offer funcs{sym?, üõësym‚ùì, üõësyms‚ùì}',
        'offer funcs{hsh?, üõëhsh‚ùì, üõëhshs‚ùì}',
        'offer funcs{matrix?, üõëmatrix‚ùì, üõëmatrices‚ùì}',
        'offer funcs{vec?, üõëvec‚ùì, üõëvectors‚ùì}'
    ]
)

@f10.spawn_behaviors(
    [
        '`üôà` to alias `private`',
        '`üõ°Ô∏è` to alias `protected`',
        '`üÜï` to alias `new`',
        '`üè†` to alias `source_location` for `::Method`',
        'alias `Math` funcs{`sqrt`, `cbrt`} w/ {`‚àö`, `‚àõ`}',
        'alias `Math` funcs{`log_e`, `log2`, `log10`} w/ {`log‚Çë`, `log‚ÇÇ`, `log‚ÇÅ‚ÇÄ`}'
    ]
)

@f11.spawn_behaviors(['create module{SetTheory}', 'create class{Closure}', 'create class{NumberSet}'])

@f12.spawn_behaviors(['offer Class aliases: {`üìÅ` -> `File`}, {`üóÑÔ∏è` -> `Dir`}'])

@f22.spawn_behaviors(
    [
        'offers a light layer over `GC`',
        'offers a light layer over `JIT`',
        'offers a light layer over `OpenCL`',
        'offers a light layer over `OpenGL`',
        'offers a light layer over `GCC`',
        'offers a light layer of utilities to get-set various OS related information and values',
        'offers a light layer for comparing compiled `Ruby` code'
    ]
)

@f24.spawn_behaviors(
    [
        'syntax category{snake_case} aliased w/ {üêç}',
        'syntax category{snake_case_capital} aliased w/ {üêç‚¨Ü}',
        'syntax category{camel_case} aliased w/ {üê´}',
        'syntax category{camel_case_lower} aliased w/ {üê´‚¨á}'
    ]
)

@f26.spawn_behaviors(
    [
        'offer Class aliases: {`üìÖ` -> `Date`}, {`üïí` -> `Time`}, {`üìÖüïí` -> `DateTime`}|{OPTIONAL}'
    ]
)

@f27.spawn_behaviors(
    [
        'has additive identity{0} and multiplicative identity{1}',
        'preserves precision across math operations as best as possible',
        'each ThetaAngle representation has a corresponding static function which calls the needed constructor',
        'vocabulary functions involving 2 ThetaAngle are provided in module {ThetaAngle::Pair}',
        'vocabulary functions involving 1 ThetaAngle are provided as funcs',
        'offer `Refinement` w/ module{ThetaAngle::ContextStrParsing} for parsing `String` objs into `ThetaAngleAngle` objs',
        'implements `Comparable`',
        'offers functionality for `normalization`',
        'offers unary operators',
        'offers math operators'
    ]
)

@f28.spawn_behaviors(
    [
        'create float constant{ùöΩ}, golden-angle',
        'create float constant{Œ®}, super-golden-ratio',
        'alias float constant{‚ÑÆ}',
        'alias float constant{œÄ}, pie',
        'alias float constant{‚àû}, infinity',
        'create float constant{Œ¥}, silver-ratio',
        'create float constant{œÅ}, plastic-ratio',
        'create float constant{Œ©}, omega-constant',
        'create float constant{Œ≥}, euler mascheroni constant',
        'create float constants for unicode characters representing rationals',
        'create ThetaAngle constant{ùûΩ}, tau',
        'create ThetaAngle constant{·Ç¥}, golden angle',
        'create or extend a `numeric` in order to properly support `Complex Infinity`'
    ]
)

@f30.spawn_behaviors(
    [
        'create create singleton-Class{BooleanSpace}, instanced aliased by{üÖ±}',
        'support multiple data types and normalization',
        'create create singleton-Class{NucleotideSpace}, instanced aliased by{üß¨}',
        'create create singleton-Class{NumberSpace}, instanced aliased by{üî¢}',
        'create create singleton-Class{SymbolicNumbersSpace}, instanced aliased by{ùïä}'
    ]
)

@f31.spawn_behaviors(['offers an abstraction over the `Rugged` gem', 'offers health checks for current local dev state'])

@f32.spawn_behaviors(
    [
        'offers static funcs through module{‚Ñï¬π}',
        'offers static funcs through module{ùïé¬π}',
        'offers static funcs through module{‚Ñï¬≤}',
        'create Sequence{`Pronic`}',
        'create Sequence{`Square`}',
        'create Sequence{`Fibonacci`}',
        'create Sequence{`Lucas`}',
        'create Sequence{`Triangle`}',
        'create Sequence{`Hexagonal`}',
        'offers static funcs through module{‚Ñ§¬≥}',
        'offers static funcs through module{‚Ñ§¬≤}'
    ]
)

@f34.spawn_behaviors(
    [
        'offer basic abstractions to `Shape`',
        'offer basic abstractions to `Shape::PlaneFigure`',
        'offer basic abstractions to `Shape::Triangle`',
        'offer basic abstractions to `Shape::Quadrilateral`',
        'offer basic abstractions to `Shape::Circle`',
    ]
)

@f35.spawn_behaviors(
    [
        'offer categorical abstractions w/ module{`Descriptive`}',
        'offer categorical abstractions w/ module{`Probability`}',
        'offer categorical abstractions w/ module{`StatisticalLearning`}',
        'offer categorical abstractions w/ module{`TimeSeries`}',
    ]
)

@f36.spawn_behaviors(
    [
        'offer functionality for array-like data access',
        'offer functionality for controlling and monitoring memory usage',
        'offer functionality for providing cached values for any simple stats',
        'offer functionality for time-series calculations',
        'offer functionality for health-checks w/ `bitwise meta-data flags`',
        'offer functionality for various styles of `normalization`',
    ]
)

@f37.spawn_behaviors(
    [
        'create class `PseudoGraph`',
        'offer `Graph` classes the ability to transform to/from a `Matrix` representations',
    ]
)

@f38.spawn_behaviors(
    [
        'offer `Refinement` w/ module{Math::Algebra::Tropical::ContextMatrix} for class{`Matrix`}',
        'offer `Refinement` w/ module{Math::Algebra::Tropical::ContextNumeric} for `Numerics`',
        'support `Tropical Algebra` w/ any additionally needed methods in class{`Matrix`}',
        'create class `CurrencyMatrix` under module{`Math::Forex`}'
    ]
)

# TODO: double (_Complex double)
@f98.spawn_behaviors(
    [
        'dynamically add `macros` w/ `mkmf` in order to (during pre-processing) include/exclude feature-code to be compiled w/ or w/o',
        'offer (to `Ruuuby`) access to `C` math functions, especially those involving higher precision',
        'simplify import/require statements & setup as much as possible'
    ]
)
