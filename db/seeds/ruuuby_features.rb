# coding: UTF-8

@f00 = RuuubyFeature.spawn(0, "`η̂` to alias concept of `normalization` (offered in any applicable context)")
@f01 = RuuubyFeature.spawn(1, 'simplify debugging state & logging through the `RuuubyEngine`')

@f03 = RuuubyFeature.spawn(3, "`𝔠` to alias concept of `cardinality`")
@f04 = RuuubyFeature.spawn(4, '`∅` to alias concept of `empty`')
@f05 = RuuubyFeature.spawn(5, '`>>` to offer reverse functionality of `<<`', %w(str ary))
@f06 = RuuubyFeature.spawn(6, 'enable quick type checks against any object (ex: `variable.int?`)')
@f07 = RuuubyFeature.spawn(7, 'enable quick clean up functions for `enumerables`')
@f08 = RuuubyFeature.spawn(8, 'enable quick editing functions for `enumerables` (& `String`)')
@f09 = RuuubyFeature.spawn(9, 'add math `set operations` (especially for `enumerables` & `String`)')
@f10 = RuuubyFeature.spawn(10, 'offer special character aliases for natural ease of readability')
@f11 = RuuubyFeature.spawn(11, 'abstract `SetTheory` and offer discrete singleton objs which reference various groups of numbers', %w(math set-theory))
@f12 = RuuubyFeature.spawn(12, 'enable more simple `file/directory io`')
@f13 = RuuubyFeature.spawn(13, '`∃` to alias concept of `does this(arg) exist?`')
@f14 = RuuubyFeature.spawn(14, 'enable easier catching and throwing of parameter type errors')
@f15 = RuuubyFeature.spawn(15, 'enable quicker tracking and auditing of features across versions')
@f16 = RuuubyFeature.spawn(16, 'for specific classes, patch in the operation of raising to an exponent, using operator(`^`) w/ `superscripts`')
@f17 = RuuubyFeature.spawn(17, 'abstract `Trigonometry`; offering static math functions', %w(math trigonometry trig))
@f18 = RuuubyFeature.spawn(18, 'represent needed fields of math into organized groupings w/ abstractions')
@f19 = RuuubyFeature.spawn(19, 'add support for automatic-differentiation', %w(math automatic-differentiation AD auto-diff))
@f20 = RuuubyFeature.spawn(20, 'enable easier (general) syntax & pattern parsing')
@f21 = RuuubyFeature.spawn(21, 'enable easier textual/numerical/syntax parsing')
@f22 = RuuubyFeature.spawn(22, 'add a light abstraction to working w/ the built-in GC utilities', %w(ruuuby engine))
@f23 = RuuubyFeature.spawn(23, "gather statistics (and/or more debugging information) on `Ruuuby` {example-context: optimizing ordering of if-conditions / function-calls}")
@f24 = RuuubyFeature.spawn(24, "Class(String): add syntax parsing for snake-case and camel-case")
@f25 = RuuubyFeature.spawn(25, "bundle `Ruuuby` meta-data related functionality w/ base alias(`💎`)")
@f26 = RuuubyFeature.spawn(26, 'enable more simple syntax parsing for `ISO8601` and other time operations')
@f27 = RuuubyFeature.spawn(27, 'add new class (`ThetaAngle`) for easier operations involving angles')
@f28 = RuuubyFeature.spawn(28, 'formally support various math constants & equations (ex: aliasing the golden-ratio w/ (`𝚽`)', %w(math symbolic-math))
@f29 = RuuubyFeature.spawn(29, 'add new class (`Quaternion`) for easier operations involving `quaternions`', %w(math linear-algebra Quaternion))
@f30 = RuuubyFeature.spawn(30, 'mimic `SetTheory` by creating data-type groupings for Ruby data')
@f31 = RuuubyFeature.spawn(31, 'provide a `GIT API`')
@f32 = RuuubyFeature.spawn(32, 'abstract `NumberTheory`; offering static math functions', %w(math number-theory))
@f33 = RuuubyFeature.spawn(33, 'abstract `Combinatorics`; offering static math functions', %w(math combinatorics))

@f95 = RuuubyFeature.spawn(95, 'enable pure a `Ruby` only build', %w(builds))
@f96 = RuuubyFeature.spawn(96, 'painlessly support multiple Operation Systems (ex: Alpine Linux, macOS, etc)', %w(OS docker kubernetes))
@f97 = RuuubyFeature.spawn(97, 'offer custom builds of `Ruuuby` to support only the needed/wanted unicode/symbols/emojis etc', %w(builds))
@f98 = RuuubyFeature.spawn(98, '`C-extensions`', %w(builds extensions))
@f99 = RuuubyFeature.spawn(99, '`Java-extensions`/`JRuby`', %w(builds extensions))
