#!/usr/bin/env ruby
# encoding: UTF-8

RUBYOPT='-W:no-deprecated -W:no-experimental'
ENV['RUUUBY_F01']="b01|b03|b04{debug}"
require 'bundler/setup'
require 'ruuuby'

$ruuuby = 💎
$docker = 🐋
using ::Math::Algebra::Tropical::ContextNumeric
using ::Math::Algebra::Tropical::ContextMatrix
using ::ThetaAngle::ContextRuuuby
using ::ThetaAngle::ContextParamCheck
using ::String::ContextF24
using ::Ruuuby::Heuristics::ContextParsingCommandOutput

# -------------------------------------------- ⚠️ --------------------------------------------

# @see https://hub.docker.com/r/amd64/postgres/
class RuuubyServiceSetDev < RuuubyServiceSet

  attr_reader :nginx, :postgres, :js, :pgadmin

  def initialize
    super("#{💎.engine.path_base}docker-compose.dev.yml")
    @nginx    = @services['service_nginx']
    @postgres = @services['service_postgres']
    @js       = @services['service_js']
    @pgadmin  = @services['service_pgadmin']
  end

  def build_web_assets
    self.build_css
    self.build_html
    self.build_js
  end

  def build_js
    @js.container.cmd!(%w(webpack -p), 25)
    @nginx.container.file_create('/v/bundle.js', @js.container.read_file('/root/ruuuby_js/dist/bundle.js'))
  end

  def build_html
    path_minified = '/root/ruuuby_js/intermediate/ruuuby.min.html'
    path_input   = '/root/ruuuby_js/assets/ruuuby.html'
    params   = {debug: true, path_output: path_minified, path_input: path_input, minify_type: 'html'}
    response = ::Ruuuby::Protocols::RequestHTTP.execute('http://localhost:8080/js/minify', params)
    file_data = @js.container.read_file(path_minified)
    @nginx.container.file_create('/v/ruuuby.html', file_data)
  end

  def build_css
    path_minified = '/root/ruuuby_js/intermediate/ruuuby.min.css'
    path_input   = '/root/ruuuby_js/assets/ruuuby.css'
    params   = {debug: true, path_output: path_minified, path_input: path_input, minify_type: 'css'}
    response = ::Ruuuby::Protocols::RequestHTTP.execute('http://localhost:8080/js/minify', params)
    file_data = @js.container.read_file(path_minified)
    @nginx.container.file_create('/v/ruuuby.css', file_data)
  end

end

# -------------------------------------------- ⚠️ --------------------------------------------

module ::Ruuuby
  module MetaData

    # `🐋`
    class DockerAPI < ::Ruuuby::MetaData::RuuubyAPIComponentCLI

      def create_needed_network
        🛑 ::ArgumentError.new("| c{DockerAPI}-> m{create_needed_network} was called when the network{ruuuby_network} already exists ") if ∃🌐?('ruuuby_network')
        self._run_cmd('network create -d bridge --subnet 192.168.0.0/24 --gateway 192.168.0.1 ruuuby_network')
      end

      def run_dev
        🛑 ::ArgumentError.new("| c{DockerAPI}-> m{run_dev} was called when container{ruuuby_nginx} was detected to be running ") if ∃🐋?('service_nginx')
        result = @engine.api_zsh.run_script(::Ruuuby::MetaData::ZshAPI::Scripts::Docker::Compose::DEV_RUN)
        if result == 'ok'
          true
        else
          🛑 ::ArgumentError.new("| {🐋}-> m{run_dev} got non-ok response{#{result.to_s}} |")
        end
      end

    end
  end
end

require 'irb'
IRB.start(__FILE__)
