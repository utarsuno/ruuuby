# coding: utf-8

RSpec.describe 'big_decimal.rb' do
  let(:data_leet_kinda){BigDecimal('1.337')}

  context 'extends class[BigDecimal]' do

    context 'by adding needed functions' do
      it 'exists' do
        RuuubyTestHelper::Nums::CONFIG_BIG_DECIMAL[:ruby].‚àÄ{|c| expect(::BigDecimal.‚àÉ‚®ç?(c)).to eq(true)}
      end
    end

    context 'by adding function{‚Ñï?}' do
      context 'handles needed scenarios' do
        it 'cases: positive' do
          expect(data_big_decimal_zero.‚Ñï?).to eq(true)
          expect(data_big_decimal_one.‚Ñï?).to eq(true)
          expect(data_big_decimal_leet.‚Ñï?).to eq(true)
        end
        it 'cases: negative' do
          data_big_decimal_error_cases.‚àÄ{|n| expect(n.‚Ñï?).to eq(false)}
          expect(data_big_decimal_negative_one.‚Ñï?).to eq(false)
          expect(BigDecimal('1337.1337').‚Ñï?).to eq(false)
        end
      end
    end

    context 'by adding function{‚Ñ§?}' do
      context 'handles needed scenarios' do
        it 'cases: positive' do
          expect(data_big_decimal_negative_leet.‚Ñ§?).to eq(true)
          expect(data_big_decimal_negative_one.‚Ñ§?).to eq(true)
          expect(data_big_decimal_zero.‚Ñ§?).to eq(true)
          expect(data_big_decimal_one.‚Ñ§?).to eq(true)
          expect(data_big_decimal_leet.‚Ñ§?).to eq(true)
        end
        it 'cases: false' do
          data_big_decimal_error_cases.‚àÄ{|n| expect(n.‚Ñ§?).to eq(false)}
        end
      end
    end

    context 'by adding function{‚Ñö?}' do
      context 'handles needed scenarios' do
        it 'cases: positive' do
          expect(data_big_decimal_one.‚Ñö?).to eq(true)
        end
        it 'cases: negative' do
          data_big_decimal_error_cases.‚àÄ{|n| expect(n.‚Ñö?).to eq(false)}
        end
      end
    end

    context 'by adding function{‚ÑÇ?}' do
      context 'handles needed scenarios' do
        it 'cases: positive' do
          expect(data_leet_kinda.‚ÑÇ?).to eq(true)
        end
        it 'cases: false' do
          data_big_decimal_error_cases.‚àÄ{|n| expect(n.‚ÑÇ?).to eq(false)}
        end
      end
    end

    context 'by adding function{‚Ñù?}' do
      context 'handles needed scenarios' do
        it 'cases: positive' do
          expect(data_leet_kinda.‚Ñù?).to eq(true)
        end
        it 'cases: false' do
          data_big_decimal_error_cases.‚àÄ{|n| expect(n.‚Ñù?).to eq(false)}
        end
      end
    end

    context 'by adding function{ùïå?}' do
      context 'handles needed scenarios' do
        it 'cases: positive' do
          expect(data_leet_kinda.ùïå?).to eq(true)
        end
        it 'cases: false' do
          data_big_decimal_error_cases.‚àÄ{|n| expect(n.ùïå?).to eq(false)}
        end
      end
    end
  end

  #  __   ___  __   ___  __   __                   __   ___
  # |__) |__  |__) |__  /  \ |__)  |\/|  /\  |\ | /  ` |__
  # |    |___ |  \ |    \__/ |  \  |  | /~~\ | \| \__, |___
  context 'performance', :'performance' do
    context 'func{‚Ñï?}: performs very quickly' do
      it 'for cases: true' do
        expect{data_big_decimal_zero.‚Ñï?}.to perform_very_quickly
      end
      it 'for cases: false' do
        expect{data_big_decimal_negative_one.‚Ñï?}.to perform_very_quickly
        data_big_decimal_error_cases.‚àÄ{|n| expect{n.‚Ñ§?}.to perform_very_quickly}
      end
    end

    context 'func{‚Ñ§?}: performs very quickly' do
      it 'for cases: true' do
        expect{data_big_decimal_negative_leet.‚Ñ§?}.to perform_very_quickly
      end
      it 'for cases: false' do
        data_big_decimal_error_cases.‚àÄ{|n| expect{n.‚Ñ§?}.to perform_very_quickly}
      end
    end

    context 'func{‚ÑÇ?}: performs very quickly' do
      it 'for cases: true' do
        expect{data_big_decimal_zero.‚ÑÇ?}.to perform_very_quickly
      end
      it 'for cases: false' do
        expect{data_big_decimal_negative_one.‚ÑÇ?}.to perform_very_quickly
        data_big_decimal_error_cases.‚àÄ{|n| expect{n.‚ÑÇ?}.to perform_very_quickly}
      end
    end

    context 'func{‚Ñö?}: performs very quickly' do
      it 'for cases: true' do
        expect{data_big_decimal_one.‚Ñö?}.to perform_very_quickly
      end
      it 'for cases: false' do
        data_big_decimal_error_cases.‚àÄ{|n| expect{n.‚Ñö?}.to perform_very_quickly}
      end
    end

    context 'func{‚Ñù?}: performs very quickly' do
      it 'for cases: true' do
        expect{data_leet_kinda.‚Ñù?}.to perform_very_quickly
      end
      it 'for cases: false' do
        data_big_decimal_error_cases.‚àÄ{|n| expect{n.‚Ñù?}.to perform_very_quickly}
      end
    end

    context 'func{ùïå?}: performs very quickly' do
      it 'for cases: true' do
        expect{data_leet_kinda.ùïå?}.to perform_very_quickly
      end
      it 'for cases: false' do
        data_big_decimal_error_cases.‚àÄ{|n| expect{n.ùïå?}.to perform_very_quickly}
      end
    end

  end

end
