# coding: utf-8

RSpec.describe 'complex.rb' do
  let(:data_nan_with_complex){Complex(Float::NAN, 1.5)}
  let(:data_infinity_with_complex){Complex(1.0/0.0, 1.5)}
  let(:data_negative_infinity_with_complex){Complex(1.0/0.0, 1.5)}
  let(:dataf_one){Complex(1.0)}
  let(:datac_one){Complex(1, 1)}
  let(:data_minus_leet){Complex(-1337)}

  context 'extends class[Complex]' do

    context 'by adding needed functions' do
      it 'exists' do
        RuuubyTestHelper::Nums::CONFIG_COMPLEX[:ruby].‚àÄ{|c| expect(::Complex.‚àÉ‚®ç?(c)).to eq(true)}
      end
    end

    context 'by adding function{‚Ñï?}' do
      context 'handles needed scenarios' do
        it 'cases: positive' do
          expect(data_complex_zero.‚Ñï?).to eq(true)
          expect(data_complex_one.‚Ñï?).to eq(true)
          expect(data_complex_leet.‚Ñï?).to eq(true)
        end
        context 'cases: negative' do
          it 'normal non-matching data' do
            expect(Complex(0, 1).‚Ñï?).to eq(false)
            expect(datac_one.‚Ñï?).to eq(false)
            expect(Complex(-1).‚Ñï?).to eq(false)
            expect(Complex(1337.1337).‚Ñï?).to eq(false)
          end
          it 'NaNs' do
            expect(data_complex_nan.‚Ñï?).to eq(false)
            expect(data_complex_inf.‚Ñï?).to eq(false)
            expect(data_complex_negative_inf.‚Ñï?).to eq(false)
          end
        end
      end
    end

    context 'by adding function{‚Ñ§?}' do
      context 'handles needed scenarios' do
        it 'cases: positive' do
          expect(data_minus_leet.‚Ñ§?).to eq(true)
          expect(Complex(-1).‚Ñ§?).to eq(true)
          expect(data_complex_zero.‚Ñ§?).to eq(true)
          expect(data_complex_one.‚Ñ§?).to eq(true)
          expect(data_complex_leet.‚Ñ§?).to eq(true)
        end
        it 'cases: negative' do
          expect(data_complex_nan.‚Ñ§?).to eq(false)
          expect(Complex(0, 1).‚Ñ§?).to eq(false)
          expect(datac_one.‚Ñ§?).to eq(false)
          expect(Complex(1337.1337).‚Ñ§?).to eq(false)
        end
      end
    end

    context 'by adding function{‚Ñö?}' do
      context 'handles needed scenarios' do
        it 'cases: positive' do
          expect(dataf_one.‚Ñö?).to eq(true)
        end
        it 'cases: negative' do
          expect(data_complex_nan.‚Ñö?).to eq(false)
        end
        it 'cases: un-covered scope' do
          expect(Complex(1.1337).‚Ñö?).to eq(nil)
        end
      end
    end

    context 'by adding function{‚ÑÇ?}' do
      context 'handles needed scenarios' do
        it 'cases: positive' do
          expect(datac_one.‚ÑÇ?).to eq(true)
        end
        it 'cases: negative' do
          expect(data_complex_nan.‚ÑÇ?).to eq(false)
        end
      end
    end

    context 'by adding function{‚Ñù?}' do
      context 'handles needed scenarios' do
        it 'cases: positive' do
          expect(data_complex_one.‚Ñù?).to eq(true)
        end
        it 'cases: negative' do
          expect(datac_one.‚Ñù?).to eq(false)
          expect(data_complex_nan.‚ÑÇ?).to eq(false)
        end
      end
    end

    context 'by adding function{ùïå?}' do
      context 'handles needed scenarios' do
        it 'cases: positive' do
          expect(data_complex_one.ùïå?).to eq(true)
        end
        it 'cases: negative' do
          expect(data_complex_nan.ùïå?).to eq(false)
        end
      end
    end

  end

  #  __   ___  __   ___  __   __                   __   ___
  # |__) |__  |__) |__  /  \ |__)  |\/|  /\  |\ | /  ` |__
  # |    |___ |  \ |    \__/ |  \  |  | /~~\ | \| \__, |___
  context 'performance', :'performance' do
    context 'func{‚Ñï?}: performs very quickly' do
      it 'for cases: true' do
        expect{data_complex_zero.‚Ñï?}.to perform_very_quickly
      end
      it 'for cases: false' do
        expect{data_complex_nan.‚Ñï?}.to perform_very_quickly
      end
    end

    context 'func{‚Ñ§?}: performs very quickly' do
      it 'for cases: true' do
        expect{data_minus_leet.‚Ñ§?}.to perform_very_quickly
      end
      it 'for cases: false' do
        expect{data_complex_nan.‚Ñ§?}.to perform_very_quickly
      end
    end

    context 'func{‚ÑÇ?}: performs very quickly' do
      it 'for cases: true' do
        expect{datac_one.‚ÑÇ?}.to perform_very_quickly
      end
      it 'for cases: false' do
        expect{data_complex_nan.‚ÑÇ?}.to perform_very_quickly
      end
    end

    context 'func{‚Ñö?}: performs very quickly' do
      it 'for cases: true' do
        expect{dataf_one.‚Ñö?}.to perform_very_quickly
      end
      it 'for cases: false' do
        expect{data_complex_nan.‚Ñö?}.to perform_very_quickly
      end
    end

    context 'func{‚Ñù?}: performs very quickly' do
      it 'for cases: true' do
        expect{data_complex_one.‚Ñù?}.to perform_very_quickly
      end
      it 'for cases: false' do
        expect{data_complex_nan.‚Ñù?}.to perform_very_quickly
      end
    end

    context 'func{ùïå?}: performs very quickly' do
      it 'for cases: true' do
        expect{data_complex_one.ùïå?}.to perform_very_quickly
      end
      it 'for cases: false' do
        expect{data_complex_nan.ùïå?}.to perform_very_quickly

      end
    end

  end

end
