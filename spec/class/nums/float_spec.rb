# coding: utf-8

RSpec.describe 'float.rb' do
  let(:data_nan){0.0/0.0}
  let(:data_infinity){1/0.0}
  let(:data_negative_infinity){-1/0.0}

  context 'extends class[Float]' do

    context 'by adding needed functions' do
      it 'exists' do
        RuuubyTestHelper::Nums::CONFIG_FLOAT[:ruby].‚àÄ{|c| expect(::Float.‚àÉfunc?(c)).to eq(true)}
      end
    end

    context 'by adding function{‚Ñï?}' do
      context 'handles needed scenarios' do
        it 'cases: positive' do
          expect(0.0.‚Ñï?).to eq(true)
          expect(1.0.‚Ñï?).to eq(true)
          expect(1337.0.‚Ñï?).to eq(true)
        end
        it 'cases: negative' do
          expect(data_nan.‚Ñï?).to eq(false)
          expect(data_infinity.‚Ñï?).to eq(false)
          expect(data_negative_infinity.‚Ñï?).to eq(false)
          expect((-1.0).‚Ñï?).to eq(false)
          expect(1337.1337.‚Ñï?).to eq(false)
        end
      end
    end

    context 'by adding function{‚Ñ§?}' do
      context 'handles needed scenarios' do
        it 'cases: positive' do
          expect(-1337.0.‚Ñ§?).to eq(true)
          expect(-1.0.‚Ñ§?).to eq(true)
          expect(0.0.‚Ñ§?).to eq(true)
          expect(1.0.‚Ñ§?).to eq(true)
          expect(1337.0.‚Ñ§?).to eq(true)
        end
        it 'cases: negative' do
          expect(data_nan.‚Ñ§?).to eq(false)
          expect(data_infinity.‚Ñ§?).to eq(false)
          expect(data_negative_infinity.‚Ñ§?).to eq(false)
        end
      end
    end

    context 'by adding function{‚Ñö?}' do
      context 'handles needed scenarios' do
        it 'cases: positive' do
          expect(1.0.‚Ñö?).to eq(true)
        end
        it 'cases: negative' do
          expect(data_nan.‚Ñö?).to eq(false)
          expect(data_infinity.‚Ñö?).to eq(false)
          expect(data_negative_infinity.‚Ñö?).to eq(false)
        end
        it 'cases: un-covered scope' do
          expect(1.1337.‚Ñö?).to eq(nil)
        end
      end
    end

    context 'by adding function{‚ÑÇ?}' do
      context 'handles needed scenarios' do
        it 'cases: positive' do
          expect(1.337.‚ÑÇ?).to eq(true)
        end
        it 'cases: negative' do
          expect(data_nan.‚ÑÇ?).to eq(false)
          expect(data_infinity.‚ÑÇ?).to eq(false)
          expect(data_negative_infinity.‚ÑÇ?).to eq(false)
        end
      end
    end

    context 'by adding function{‚Ñù?}' do
      context 'handles needed scenarios' do
        it 'cases: positive' do
          expect(0.0.‚Ñù?).to eq(true)
        end
        it 'cases: negative' do
          expect(data_nan.‚Ñù?).to eq(false)
          expect(data_infinity.‚Ñù?).to eq(false)
          expect(data_negative_infinity.‚Ñù?).to eq(false)
        end
      end
    end

    context 'by adding function{ùïå?}' do
      context 'handles needed scenarios' do
        it 'cases: positive' do
          expect(0.0.ùïå?).to eq(true)
        end
        it 'cases: negative' do
          expect(data_nan.ùïå?).to eq(false)
          expect(data_infinity.ùïå?).to eq(false)
          expect(data_negative_infinity.ùïå?).to eq(false)
        end
      end
    end

  end

  #  __   ___  __   ___  __   __                   __   ___
  # |__) |__  |__) |__  /  \ |__)  |\/|  /\  |\ | /  ` |__
  # |    |___ |  \ |    \__/ |  \  |  | /~~\ | \| \__, |___
  context 'performance', :'performance' do
    context 'func{‚Ñï?}: performs very quickly' do
      it 'for cases: true' do
        expect{0.0.‚Ñï?}.to perform_very_quickly
      end
      it 'cases: negative' do
        expect{data_nan.‚Ñï?}.to perform_very_quickly
      end
    end

    context 'func{‚Ñ§?}: performs very quickly' do
      it 'for cases: true' do
        expect{-1337.0.‚Ñ§?}.to perform_very_quickly
      end
      it 'cases: negative' do
        expect{data_nan.‚Ñ§?}.to perform_very_quickly
      end
    end

    context 'func{‚ÑÇ?}: performs very quickly' do
      it 'for cases: true' do
        expect{1.337.‚ÑÇ?}.to perform_very_quickly
      end
      it 'cases: negative' do
        expect{data_nan.‚ÑÇ?}.to perform_very_quickly
      end
    end

    context 'func{‚Ñö?}: performs very quickly' do
      it 'for cases: true' do
        expect{1.0.‚Ñö?}.to perform_very_quickly
      end
      it 'cases: negative' do
        expect{data_nan.‚Ñö?}.to perform_very_quickly
      end
    end

    context 'func{‚Ñù?}: performs extremely quickly' do
      it 'for cases: true' do
        expect{0.0.‚Ñù?}.to perform_extremely_quickly
      end
      it 'cases: negative' do
        expect{data_nan.‚Ñù?}.to perform_extremely_quickly
      end
    end

    context 'func{ùïå?}: performs extremely quickly' do
      it 'for cases: true' do
        expect{0.0.ùïå?}.to perform_extremely_quickly
      end
      it 'cases: negative' do
        expect{data_nan.ùïå?}.to perform_extremely_quickly
      end
    end
  end

end
