# coding: utf-8

RSpec.describe 'rational.rb' do
  let(:data_default){Rational(2, 3)}
  let(:data_minus_leet){Rational(-1337, 1)}
  let(:data_minus_leet2){Rational(-1337, 2)}
  let(:data_for_performance_a){Rational(1, 1)}
  let(:data_for_performance_b){Rational(-1, 1)}

  let(:data_with_complex_only_real_component){Rational(Complex(1, 0.0), 1.5)}
  let(:data_with_complex){Rational(Complex(1, 1.5), 1.5)}

  context 'extends class[Rational]' do

    context 'by adding needed functions' do
      it 'exists' do
        RuuubyTestHelper::Nums::CONFIG_RATIONAL[:ruby].‚àÄ{|c| expect(::Rational.‚àÉfunc?(c)).to eq(true)}
      end
    end

    context 'by adding function{‚Ñï?}' do
      context 'handles needed scenarios' do
        it 'cases: positive' do
          expect(Rational(0).‚Ñï?).to eq(true)
          expect(Rational(1, 1).‚Ñï?).to eq(true)
          expect(Rational(1337, 1337).‚Ñï?).to eq(true)
        end
        it 'cases: negative' do
          expect(data_with_complex.‚Ñï?).to eq(false)
        end
      end
    end

    context 'by adding function{‚Ñ§?}' do
      context 'handles needed scenarios' do
        it 'cases: positive' do
          expect(Rational(-1337, 1).‚Ñ§?).to eq(true)
          expect(Rational(-1, 1).‚Ñ§?).to eq(true)
          expect(Rational(0, 1).‚Ñ§?).to eq(true)
          expect(Rational(1, 1).‚Ñ§?).to eq(true)
          expect(Rational(1337, 1).‚Ñ§?).to eq(true)
          expect(Rational(Complex(3, 0), 1).‚Ñ§?).to eq(true)
        end
        it 'cases: negative' do
          expect(data_with_complex.‚Ñ§?).to eq(false)
        end
      end
    end

    context 'by adding function{‚ÑÇ?}' do
      context 'handles needed scenarios' do
        it 'cases: positive' do
          expect(data_default.‚ÑÇ?).to eq(true)
          expect(data_with_complex.‚ÑÇ?).to eq(true)
        end
      end
    end

    context 'by adding function{‚Ñö?}' do
      context 'handles needed scenarios' do
        it 'cases: positive' do
          expect(data_default.‚Ñö?).to eq(true)
        end
        it 'cases: negative' do
          expect(data_with_complex.‚Ñö?).to eq(false)
        end
      end
    end

    context 'by adding function{‚Ñù?}' do
      context 'handles needed scenarios' do
        it 'cases: positive' do
          expect(data_default.‚Ñù?).to eq(true)
          expect(data_with_complex_only_real_component.‚Ñù?).to eq(true)
        end
        it 'cases: negative' do
          expect(data_with_complex.‚Ñù?).to eq(false)
        end
      end
    end

    context 'by adding function{ùïå?}' do
      context 'handles needed scenarios' do
        it 'cases: positive' do
          expect(data_default.ùïå?).to eq(true)
          expect(data_with_complex.ùïå?).to eq(true)
          expect(data_with_complex_only_real_component.ùïå?).to eq(true)
        end
      end
    end

  end

  #  __   ___  __   ___  __   __                   __   ___
  # |__) |__  |__) |__  /  \ |__)  |\/|  /\  |\ | /  ` |__
  # |    |___ |  \ |    \__/ |  \  |  | /~~\ | \| \__, |___
  context 'performance', :'performance' do
    context 'func{‚Ñï?}: performs extremely quickly' do
      it 'for cases: true' do
        expect{data_for_performance_a.‚Ñï?}.to perform_extremely_quickly
      end
      it 'for cases: negative' do
        expect{data_for_performance_b.‚Ñï?}.to perform_extremely_quickly
      end
    end

    context 'func{‚Ñ§?}: performs very quickly' do
      it 'for cases: true' do
        expect{data_minus_leet.‚Ñ§?}.to perform_very_quickly
      end
      it 'for cases: negative' do
        expect{data_minus_leet2.‚Ñ§?}.to perform_very_quickly
      end
    end

    context 'func{‚ÑÇ?}: performs extremely quickly' do
      it 'for cases: true' do
        expect{data_default.‚ÑÇ?}.to perform_extremely_quickly
        expect{data_with_complex.‚ÑÇ?}.to perform_extremely_quickly
      end
    end

    context 'func{‚Ñö?}: performs very quickly' do
      it 'for cases: true' do
        expect{data_default.‚Ñö?}.to perform_very_quickly
      end
      it 'for cases: negative' do
        expect{data_with_complex.‚Ñö?}.to perform_very_quickly
      end
    end

    context 'func{‚Ñù?}: performs extremely quickly' do
      it 'for cases: true' do
        expect{data_default.‚Ñù?}.to perform_extremely_quickly
        expect{data_with_complex.‚Ñù?}.to perform_extremely_quickly
      end
      it 'for cases: false' do
        expect{data_with_complex.‚Ñù?}.to perform_extremely_quickly
      end
    end

    context 'func{ùïå?}: performs very quickly' do
      it 'for cases: true' do
        expect{data_default.ùïå?}.to perform_very_quickly
      end
    end

  end
end
