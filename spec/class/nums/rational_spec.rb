# coding: utf-8

RSpec.describe 'rational.rb' do
  let(:data_minus_leet2){‚Ñö(-1337, 2)}

  let(:data_with_complex_only_real_component){‚Ñö(‚ÑÇ(1, 0.0), 1.5)}
  let(:data_with_complex){‚Ñö(‚ÑÇ(1, 1.5), 1.5)}

  context 'extends class[Rational]' do

    context 'by adding needed functions' do
      it 'exists' do
        RuuubyTestHelper::Nums::CONFIG_RATIONAL[:ruby].‚àÄ{|c| expect(::Rational.‚àÉ‚®ç?(c)).to eq(true)}
      end
    end

    context 'by adding function{‚Ñï?}' do
      context 'handles needed scenarios' do
        it 'cases: positive' do
          expect(data_rational_zero.‚Ñï?).to eq(true)
          expect(data_rational_one.‚Ñï?).to eq(true)
          expect(data_rational_leet.‚Ñï?).to eq(true)
        end
        it 'cases: negative' do
          expect(data_with_complex.‚Ñï?).to eq(false)
        end
      end
    end

    context 'by adding function{‚Ñ§?}' do
      context 'handles needed scenarios' do
        it 'cases: positive' do
          expect(data_rational_negative_leet.‚Ñ§?).to eq(true)
          expect(data_rational_negative_one.‚Ñ§?).to eq(true)
          expect(data_rational_zero.‚Ñ§?).to eq(true)
          expect(data_rational_one.‚Ñ§?).to eq(true)
          expect(data_rational_leet.‚Ñ§?).to eq(true)
          expect(‚Ñö(‚ÑÇ(3, 0), 1).‚Ñ§?).to eq(true)
        end
        it 'cases: negative' do
          expect(data_with_complex.‚Ñ§?).to eq(false)
        end
      end
    end

    context 'by adding function{‚ÑÇ?}' do
      context 'handles needed scenarios' do
        it 'cases: positive' do
          expect(data_rational_default.‚ÑÇ?).to eq(true)
          expect(data_with_complex.‚ÑÇ?).to eq(true)
        end
      end
    end

    context 'by adding function{‚Ñö?}' do
      context 'handles needed scenarios' do
        it 'cases: positive' do
          expect(data_rational_default.‚Ñö?).to eq(true)
        end
        it 'cases: negative' do
          expect(data_with_complex.‚Ñö?).to eq(false)
        end
      end
    end

    context 'by adding function{‚Ñù?}' do
      context 'handles needed scenarios' do
        it 'cases: positive' do
          expect(data_rational_default.‚Ñù?).to eq(true)
          expect(data_with_complex_only_real_component.‚Ñù?).to eq(true)
        end
        it 'cases: negative' do
          expect(data_with_complex.‚Ñù?).to eq(false)
        end
      end
    end

    context 'by adding function{ùïå?}' do
      context 'handles needed scenarios' do
        it 'cases: positive' do
          expect(data_rational_default.ùïå?).to eq(true)
          expect(data_with_complex.ùïå?).to eq(true)
          expect(data_with_complex_only_real_component.ùïå?).to eq(true)
        end
      end
    end

    context 'supports feature(`f16`)' do
      context 'by supporting operation {^‚Åª‚Åπ}' do
        context 'handles needed scenarios' do
          it 'cases: positive' do
            expect_scenarios_power_operations(data_range_rational_all_but_zero, :‚Åª‚Åπ, -9, true)
            expect_scenarios_power_operations(data_range_rational_w_complex, :‚Åª‚Åπ, -9, true)
          end
          it 'cases: negative' do
            expect{data_rational_zero^‚Åª‚Åπ}.to raise_error(ZeroDivisionError)
          end
        end
      end
      context 'by supporting operation {^‚Åª‚Å∏}' do
        context 'handles needed scenarios' do
          it 'cases: positive' do
            expect_scenarios_power_operations(data_range_rational_all_but_zero, :‚Åª‚Å∏, -8, true)
            expect_scenarios_power_operations(data_range_rational_w_complex, :‚Åª‚Å∏, -8, true)
          end
          it 'cases: negative' do
            expect{data_rational_zero^‚Åª‚Å∏}.to raise_error(ZeroDivisionError)
          end
        end
      end
      context 'by supporting operation {^‚Åª‚Å∑}' do
        context 'handles needed scenarios' do
          it 'cases: positive' do
            expect_scenarios_power_operations(data_range_rational_all_but_zero, :‚Åª‚Å∑, -7, true)
            expect_scenarios_power_operations(data_range_rational_w_complex, :‚Åª‚Å∑, -7, true)
          end
          it 'cases: negative' do
            expect{data_rational_zero^‚Åª‚Å∑}.to raise_error(ZeroDivisionError)
          end
        end
      end
      context 'by supporting operation {^‚Åª‚Å∂}' do
        context 'handles needed scenarios' do
          it 'cases: positive' do
            expect_scenarios_power_operations(data_range_rational_all_but_zero, :‚Åª‚Å∂, -6, true)
            expect_scenarios_power_operations(data_range_rational_w_complex, :‚Åª‚Å∂, -6, true)
          end
          it 'cases: negative' do
            expect{data_rational_zero^‚Åª‚Å∂}.to raise_error(ZeroDivisionError)
          end
        end
      end
      context 'by supporting operation {^‚Åª‚Åµ}' do
        context 'handles needed scenarios' do
          it 'cases: positive' do
            expect_scenarios_power_operations(data_range_rational_all_but_zero, :‚Åª‚Åµ, -5, true)
            expect_scenarios_power_operations(data_range_rational_w_complex, :‚Åª‚Åµ, -5, true)
          end
          it 'cases: negative' do
            expect{data_rational_zero^‚Åª‚Åµ}.to raise_error(ZeroDivisionError)
          end
        end
      end
      context 'by supporting operation {^‚Åª‚Å¥}' do
        context 'handles needed scenarios' do
          it 'cases: positive' do
            expect_scenarios_power_operations(data_range_rational_all_but_zero, :‚Åª‚Å¥, -4, true)
            expect_scenarios_power_operations(data_range_rational_w_complex, :‚Åª‚Å¥, -4, true)
          end
          it 'cases: negative' do
            expect{data_rational_zero^‚Åª‚Å¥}.to raise_error(ZeroDivisionError)
          end
        end
      end
      context 'by supporting operation {^‚Åª¬≥}' do
        context 'handles needed scenarios' do
          it 'cases: positive' do
            expect_scenarios_power_operations(data_range_rational_all_but_zero, :‚Åª¬≥, -3, true)
            expect_scenarios_power_operations(data_range_rational_w_complex, :‚Åª¬≥, -3, true)
          end
          it 'cases: negative' do
            expect{data_rational_zero^‚Åª¬≥}.to raise_error(ZeroDivisionError)
          end
        end
      end
      context 'by supporting operation {^‚Åª¬≤}' do
        context 'handles needed scenarios' do
          it 'cases: positive' do
            expect_scenarios_power_operations(data_range_rational_all_but_zero, :‚Åª¬≤, -2, true)
            expect_scenarios_power_operations(data_range_rational_w_complex, :‚Åª¬≤, -2, true)
          end
          it 'cases: negative' do
            expect{data_rational_zero^‚Åª¬≤}.to raise_error(ZeroDivisionError)
          end
        end
      end
      context 'by supporting operation {^‚Åª¬π}' do
        context 'handles needed scenarios' do
          it 'cases: positive' do
            expect_scenarios_power_operations(data_range_rational_all_but_zero, :‚Åª¬π, -1, true)
            expect_scenarios_power_operations(data_range_rational_w_complex, :‚Åª¬π, -1, true)
          end
          it 'cases: negative' do
            expect{data_rational_zero^‚Åª¬π}.to raise_error(ZeroDivisionError)
          end
        end
      end
      context 'by supporting operation {^‚Å∞}' do
        context 'handles needed scenarios' do
          it 'cases: positive' do
            expect_scenarios_power_operations(data_range_rational_all_but_zero, :‚Å∞, 0, true)
            expect_scenarios_power_operations(data_range_rational_w_complex, :‚Å∞, 0, true)
          end
          it 'cases: negative' do
            expect((data_rational_zero^‚Å∞).nan?).to eq(true)
          end
        end
      end
      context 'by supporting operation {^¬π}' do
        context 'handles needed scenarios' do
          it 'cases: positive' do
            expect_scenarios_power_operations(data_range_rational, :¬π, 1, true)
            expect_scenarios_power_operations(data_range_rational_w_complex, :¬π, 1, true)
          end
        end
      end
      context 'by supporting operation {^¬≤}' do
        context 'handles needed scenarios' do
          it 'cases: positive' do
            expect_scenarios_power_operations(data_range_rational, :¬≤, 2, true)
            expect_scenarios_power_operations(data_range_rational_w_complex, :¬≤, 2, true)
          end
        end
      end
      context 'by supporting operation {^¬≥}' do
        context 'handles needed scenarios' do
          it 'cases: positive' do
            expect_scenarios_power_operations(data_range_rational, :¬≥, 3, true)
            expect_scenarios_power_operations(data_range_rational_w_complex, :¬≥, 3, true)
          end
        end
      end
      context 'by supporting operation {^‚Å¥}' do
        context 'handles needed scenarios' do
          it 'cases: positive' do
            expect_scenarios_power_operations(data_range_rational, :‚Å¥, 4, true)
            expect_scenarios_power_operations(data_range_rational_w_complex, :‚Å¥, 4, true)
          end
        end
      end
      context 'by supporting operation {^‚Åµ}' do
        context 'handles needed scenarios' do
          it 'cases: positive' do
            expect_scenarios_power_operations(data_range_rational, :‚Åµ, 5, true)
            expect_scenarios_power_operations(data_range_rational_w_complex, :‚Åµ, 5, true)
          end
        end
      end
      context 'by supporting operation {^‚Å∂}' do
        context 'handles needed scenarios' do
          it 'cases: positive' do
            expect_scenarios_power_operations(data_range_rational, :‚Å∂, 6, true)
            expect_scenarios_power_operations(data_range_rational_w_complex, :‚Å∂, 6, true)
          end
        end
      end
      context 'by supporting operation {^‚Å∑}' do
        context 'handles needed scenarios' do
          it 'cases: positive' do
            expect_scenarios_power_operations(data_range_rational, :‚Å∑, 7, true)
            expect_scenarios_power_operations(data_range_rational_w_complex, :‚Å∑, 7, true)
          end
        end
      end
      context 'by supporting operation {^‚Å∏}' do
        context 'handles needed scenarios' do
          it 'cases: positive' do
            expect_scenarios_power_operations(data_range_rational, :‚Å∏, 8, true)
            expect_scenarios_power_operations(data_range_rational_w_complex, :‚Å∏, 8, true)
          end
        end
      end
      context 'by supporting operation {^‚Åπ}' do
        context 'handles needed scenarios' do
          it 'cases: positive' do
            expect_scenarios_power_operations(data_range_rational, :‚Åπ, 9, true)
            expect_scenarios_power_operations(data_range_rational_w_complex, :‚Åπ, 9, true)
          end
        end
      end
    end # end: {supports feature(`f16`)}

  end

  #  __   ___  __   ___  __   __                   __   ___
  # |__) |__  |__) |__  /  \ |__)  |\/|  /\  |\ | /  ` |__
  # |    |___ |  \ |    \__/ |  \  |  | /~~\ | \| \__, |___
  context 'performance', :performance do
    context 'func{‚Ñï?}: performs extremely quickly' do
      it 'for cases: true' do
        expect{data_rational_one.‚Ñï?}.to perform_extremely_quickly
      end
      it 'for cases: negative' do
        expect{data_rational_negative_one.‚Ñï?}.to perform_extremely_quickly
      end
    end

    context 'func{‚Ñ§?}: performs very quickly' do
      it 'for cases: true' do
        expect{data_rational_negative_leet.‚Ñ§?}.to perform_very_quickly
      end
      it 'for cases: negative' do
        expect{data_minus_leet2.‚Ñ§?}.to perform_very_quickly
      end
    end

    context 'func{‚ÑÇ?}: performs extremely quickly' do
      it 'for cases: true' do
        expect{data_rational_default.‚ÑÇ?}.to perform_extremely_quickly
        expect{data_with_complex.‚ÑÇ?}.to perform_extremely_quickly
      end
    end

    context 'func{‚Ñö?}: performs very quickly' do
      it 'for cases: true' do
        expect{data_rational_default.‚Ñö?}.to perform_very_quickly
      end
      it 'for cases: negative' do
        expect{data_with_complex.‚Ñö?}.to perform_very_quickly
      end
    end

    context 'func{‚Ñù?}: performs extremely quickly' do
      it 'for cases: true' do
        expect{data_rational_default.‚Ñù?}.to perform_extremely_quickly
        expect{data_with_complex.‚Ñù?}.to perform_extremely_quickly
      end
      it 'for cases: false' do
        expect{data_with_complex.‚Ñù?}.to perform_extremely_quickly
      end
    end

    context 'func{ùïå?}: performs very quickly' do
      it 'for cases: true' do
        expect{data_rational_default.ùïå?}.to perform_very_quickly
      end
    end

    context 'roughly preserves original pre-extension-performance' do

      context 'performance hit for following funcs, are under 105%' do
        it '`^‚Åª‚Åπ` (compared to `** -9`)' do
          expect {data_rational_3^‚Åª‚Åπ}.to perform_slower_than {data_rational_3 ** -9}.within(tŒî_within).warmup(tŒî_warmup).at_most(pŒî_105)
          expect {data_rational_3 ** -9}.to perform_faster_than {data_rational_3^‚Åª‚Åπ}.within(tŒî_within).warmup(tŒî_warmup).at_most(pŒî_105)
        end

        it '`^‚Åª‚Å∏` (compared to `** -8`)' do
          expect {data_rational_3^‚Åª‚Å∏}.to perform_slower_than {data_rational_3 ** -8}.within(tŒî_within).warmup(tŒî_warmup).at_most(pŒî_105)
        end

        it '`^‚Åª‚Å∑` (compared to `** -7`)' do
          expect {data_rational_3^‚Åª‚Å∑}.to perform_slower_than {data_rational_3 ** -7}.within(tŒî_within).warmup(tŒî_warmup).at_most(pŒî_105)
        end

        it '`^‚Åª‚Å∂` (compared to `** -6`)' do
          expect {data_rational_3^‚Åª‚Å∂}.to perform_slower_than {data_rational_3 ** -6}.within(tŒî_within).warmup(tŒî_warmup).at_most(pŒî_105)
        end

        it '`^‚Åª‚Åµ` (compared to `** -5`)' do
          expect {data_rational_3^‚Åª‚Åµ}.to perform_slower_than {data_rational_3 ** -5}.within(tŒî_within).warmup(tŒî_warmup).at_most(pŒî_105)
        end

        it '`^‚Åª‚Å¥` (compared to `** -4`)' do
          expect {data_rational_3^‚Åª‚Å¥}.to perform_slower_than {data_rational_3 ** -4}.within(tŒî_within).warmup(tŒî_warmup).at_most(pŒî_105)
        end

        it '`^‚Åª¬≥` (compared to `** -3`)' do
          expect {data_rational_3^‚Åª¬≥}.to perform_slower_than {data_rational_3 ** -3}.within(tŒî_within).warmup(tŒî_warmup).at_most(pŒî_105)
        end

        it '`^‚Åª¬≤` (compared to `** -2`)' do
          expect {data_rational_3^‚Åª¬≤}.to perform_slower_than {data_rational_3 ** -2}.within(tŒî_within).warmup(tŒî_warmup).at_most(pŒî_105)
        end

        it '`^‚Åª¬π` (compared to `** -1`)' do
          expect {data_rational_3^‚Åª¬π}.to perform_slower_than {data_rational_3 ** -1}.within(tŒî_within).warmup(tŒî_warmup).at_most(pŒî_105)
        end

        it '`^‚Å∞` (compared to `** 0`)' do
          expect {data_rational_3^‚Å∞}.to perform_slower_than {data_rational_3 ** 0}.within(tŒî_within).warmup(tŒî_warmup).at_most(pŒî_105)
        end

        it '`^¬π` (compared to `** 1`)' do
          expect {data_rational_3^¬π}.to perform_slower_than {data_rational_3 ** 1}.within(tŒî_within).warmup(tŒî_warmup).at_most(pŒî_105)
        end

        it '`^¬≤` (compared to `** 2`)' do
          expect {data_rational_3^¬≤}.to perform_slower_than {data_rational_3 ** 2}.within(tŒî_within).warmup(tŒî_warmup).at_most(pŒî_105)
        end

        it '`^¬≥` (compared to `** 3`)' do
          expect {data_rational_3^¬≥}.to perform_slower_than {data_rational_3 ** 3}.within(tŒî_within).warmup(tŒî_warmup).at_most(pŒî_105)
        end

        it '`^‚Å¥` (compared to `** 4`)' do
          expect {data_rational_3^‚Å¥}.to perform_slower_than {data_rational_3 ** 4}.within(tŒî_within).warmup(tŒî_warmup).at_most(pŒî_105)
        end

        it '`^‚Åµ` (compared to `** 5`)' do
          expect {data_rational_3^‚Åµ}.to perform_slower_than {data_rational_3 ** 5}.within(tŒî_within).warmup(tŒî_warmup).at_most(pŒî_105)
        end

        it '`^‚Å∂` (compared to `** 6`)' do
          expect {data_rational_3^‚Å∂}.to perform_slower_than {data_rational_3 ** 6}.within(tŒî_within).warmup(tŒî_warmup).at_most(pŒî_105)
        end

        it '`^‚Å∑` (compared to `** 7`)' do
          expect {data_rational_3^‚Å∑}.to perform_slower_than {data_rational_3 ** 7}.within(tŒî_within).warmup(tŒî_warmup).at_most(pŒî_105)
        end

        it '`^‚Å∏` (compared to `** 8`)' do
          expect {data_rational_3^‚Å∏}.to perform_slower_than {data_rational_3 ** 8}.within(tŒî_within).warmup(tŒî_warmup).at_most(pŒî_105)
        end

        it '`^‚Åπ` (compared to `** 9`)' do
          expect {data_rational_3^‚Åπ}.to perform_slower_than {data_rational_3 ** 9}.within(tŒî_within).warmup(tŒî_warmup).at_most(pŒî_105)
        end
      end

    end

  end
end
